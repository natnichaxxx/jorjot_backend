const express = require('express');
const router = express.Router();
const Challenge = require('../models/Challenge');
const Transaction = require('../models/Transaction');
const authMiddleware = require('../middleware/authMiddleware');

// ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö
const challengeLevels = {
    1: { months: 3 },
    2: { months: 6 },
    3: { months: 9 },
    4: { months: 12 },
};

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ startDate ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏™‡∏°‡∏≠
const getChallengeStartDate = () => {
    let today = new Date();
    today.setHours(0, 0, 0, 0); // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô 00:00:00

    if (today.getDate() === 1) {
        return today; // ‡∏ñ‡πâ‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1 ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢
    }

    // ‡πÉ‡∏ä‡πâ Date.UTC() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà UTC ‡πÄ‡∏™‡∏°‡∏≠ ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1
    let nextMonth = new Date(Date.UTC(today.getUTCFullYear(), today.getUTCMonth() + 1, 1));
    return nextMonth;
};

// ‡πÄ‡∏£‡∏¥‡πà‡∏° Challenge
router.post('/start', authMiddleware, async (req, res) => {
    try {
        const userId = req.user.userId;
        const { monthlyTarget } = req.body;

        if (!monthlyTarget || monthlyTarget <= 0) {
            return res.status(400).json({ error: "Invalid monthly target amount" });
        }

        let currentChallenge = await Challenge.findOne({ user: userId, completed: false });

        let currentLevel = currentChallenge ? currentChallenge.level : 1;
        if (currentLevel >= 5) {
            return res.status(400).json({ error: "Already at the maximum level" });
        }

        let monthsRequired = challengeLevels[currentLevel].months;
        let startDate = getChallengeStartDate(); // ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì endDate ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏£‡∏≠‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        let endDate = new Date(startDate);
        endDate.setUTCMonth(endDate.getUTCMonth() + monthsRequired - 1); // ‡πÑ‡∏õ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏£‡∏≠‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        endDate.setUTCDate(1); // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô
        endDate.setUTCMonth(endDate.getUTCMonth() + 1); // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        endDate.setUTCDate(0); // ‡πÑ‡∏î‡πâ‡∏ß‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏£‡∏≠‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        endDate.setUTCHours(23, 59, 59, 999); // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô 23:59:59

        console.log(`üéØ Challenge Start Date (Fixed): ${startDate.toISOString()}`);
        console.log(`üèÅ Challenge End Date (Fixed): ${endDate.toISOString()}`);

        const newChallenge = new Challenge({
            user: userId,
            level: currentLevel,
            monthlyTarget,
            monthsRequired,
            startDate,
            endDate
        });

        await newChallenge.save();
        res.status(201).json({ message: "Challenge started!", challenge: newChallenge });

    } catch (error) {
        console.error("Error starting challenge:", error);
        res.status(500).json({ error: "Server error" });
    }
});

// ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î monthlyTarget ‡πÉ‡∏´‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ä‡∏≤‡πÄ‡∏•‡∏ô‡∏à‡πå‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
router.post('/continue', authMiddleware, async (req, res) => {
    try {
        const userId = req.user.userId;
        const { monthlyTarget } = req.body;

        if (!monthlyTarget || monthlyTarget <= 0) {
            return res.status(400).json({ error: "Invalid monthly target amount" });
        }

        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Challenge ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        let lastChallenge = await Challenge.findOne({ user: userId, completed: true }).sort({ endDate: -1 });

        if (!lastChallenge || lastChallenge.level >= 5) {
            return res.status(400).json({ error: "No eligible challenge to continue or maximum level!" });
        }

        const nextLevel = lastChallenge.level + 1;
        let newMonthsRequired = challengeLevels[nextLevel].months;
        let startDate = getChallengeStartDate();

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
        let newEndDate = new Date(startDate);
        newEndDate.setUTCMonth(newEndDate.getUTCMonth() + newMonthsRequired - 1);
        newEndDate.setUTCDate(1);
        newEndDate.setUTCMonth(newEndDate.getUTCMonth() + 1);
        newEndDate.setUTCDate(0);
        newEndDate.setUTCHours(23, 59, 59, 999);

        console.log(`üèÜ New Challenge Level: ${nextLevel}, Start Date: ${startDate.toISOString()}, End Date: ${newEndDate.toISOString()}`);

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏≤‡πÄ‡∏•‡∏ô‡∏à‡πå‡πÉ‡∏´‡∏°‡πà
        const newChallenge = new Challenge({
            user: userId,
            level: nextLevel,
            monthlyTarget,
            monthsRequired: newMonthsRequired,
            startDate,
            endDate: newEndDate
        });

        await newChallenge.save();
        res.status(201).json({ message: "Next challenge started!", challenge: newChallenge });

    } catch (error) {
        console.error("Error continuing challenge:", error);
        res.status(500).json({ error: "Server error" });
    }
});

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Challenge
router.get('/status', authMiddleware, async (req, res) => {
    try {
        const userId = req.user.userId;

        let activeChallenge = await Challenge.findOne({ user: userId, completed: false });

        if (!activeChallenge) {
            return res.status(404).json({ error: "No active challenge found" });
        }

        let currentDate = new Date();
        let challengeStartDate = new Date(activeChallenge.startDate);
        let monthsPassed = Math.floor((currentDate - challengeStartDate) / (1000 * 60 * 60 * 24 * 30)); // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ

        let successfulMonths = 0;
        let successfulMonthNames = []; // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à

        for (let i = 0; i <= monthsPassed; i++) {
            let monthStart = new Date(challengeStartDate);
            monthStart.setUTCMonth(monthStart.getUTCMonth() + i);
            monthStart.setUTCDate(1); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
            monthStart.setUTCHours(0, 0, 0, 0);

            let monthEnd = new Date(monthStart);
            monthEnd.setUTCMonth(monthEnd.getUTCMonth() + 1);
            monthEnd.setUTCDate(0); // ‡∏ß‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
            monthEnd.setUTCHours(23, 59, 59, 999);

            // ‡∏î‡∏∂‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡πâ‡∏ô
            const transactions = await Transaction.find({
                user: userId,
                date: { $gte: monthStart, $lte: monthEnd }
            });

            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
            const totalIncome = transactions
                .filter(tx => tx.transaction_type === "income")
                .reduce((sum, tx) => sum + tx.amount, 0);

            const totalExpense = transactions
                .filter(tx => tx.transaction_type === "expense")
                .reduce((sum, tx) => sum + tx.amount, 0);

            const balance = totalIncome - totalExpense;

            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤ ‡πÉ‡∏´‡πâ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            if (balance < activeChallenge.monthlyTarget) {
                await Challenge.findByIdAndDelete(activeChallenge._id); // ‡∏•‡∏ö Challenge ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
                return res.status(400).json({ error: `Challenge failed in ${monthStart.toISOString().slice(0, 7)}` });
            }

            // ‡∏ñ‡πâ‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏õ‡πâ‡∏≤ ‡∏ô‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                successfulMonths++;

                // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠ ‡πÄ‡∏ä‡πà‡∏ô "2024-03" ‚Üí "March 2024"
                let monthName = monthStart.toLocaleString('en-US', { month: 'long', year: 'numeric' });
                successfulMonthNames.push(monthName);
            
        }

        console.log(`üéØ Successful Challenge Months: ${successfulMonthNames.join(', ')}`);

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (successfulMonths >= activeChallenge.monthsRequired) {
            activeChallenge.completed = true;
            await activeChallenge.save();

            if (activeChallenge.level < 5) {
                const nextLevel = activeChallenge.level + 1;
                let newMonthsRequired = challengeLevels[nextLevel].months;
                let startDate = getChallengeStartDate(); // ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

                // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì newEndDate ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏£‡∏≠‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
                let newEndDate = new Date(startDate);
                newEndDate.setUTCMonth(newEndDate.getUTCMonth() + newMonthsRequired - 1);
                newEndDate.setUTCDate(1); // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
                newEndDate.setUTCMonth(newEndDate.getUTCMonth() + 1); // ‡∏Ç‡∏¢‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                newEndDate.setUTCDate(0); // ‡∏ß‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏£‡∏≠‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
                newEndDate.setUTCHours(23, 59, 59, 999);

                console.log(`üèÜ New Challenge Level: ${nextLevel}, Start Date: ${startDate.toISOString()}, End Date: ${newEndDate.toISOString()}`);

                const newChallenge = new Challenge({
                    user: userId,
                    level: nextLevel,
                    monthlyTarget: activeChallenge.monthlyTarget,
                    monthsRequired: newMonthsRequired,
                    startDate,
                    endDate: newEndDate
                });

                await newChallenge.save();
            }

            return res.json({ message: "Challenge completed!", newLevel: activeChallenge.level + 1 });
        }

        res.json({
            user: userId,
            message: "Challenge in progress",
            successfulMonths,
            targetMonths: activeChallenge.monthsRequired
        });

    } catch (error) {
        console.error("Error checking challenge status:", error);
        res.status(500).json({ error: "Server error" });
    }
});

// ‡∏î‡∏π‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
router.get('/monthly', authMiddleware, async (req, res) => {
    try {
        const userId = req.user.userId;
        const { year, month } = req.query;

        if (!year || !month) {
            return res.status(400).json({ error: "Please provide 'year' and 'month' in the query parameters" });
        }

        const yearInt = parseInt(year, 10);
        const monthInt = parseInt(month, 10);

        if (isNaN(yearInt) || isNaN(monthInt) || monthInt < 1 || monthInt > 12) {
            return res.status(400).json({ error: "Invalid 'year' or 'month' format" });
        }

        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        const today = new Date();
        const currentYear = today.getUTCFullYear();
        const currentMonth = today.getUTCMonth() + 1; // getUTCMonth() ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 0

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏î‡∏π‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (currentYear < yearInt || (currentYear === yearInt && currentMonth <= monthInt)) {
            return res.status(400).json({ error: "Balance for this month is not yet available. Please wait until the next month." });
        }

        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô - ‡∏™‡∏¥‡πâ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡πÉ‡∏ä‡πâ UTC)
        const startDate = new Date(Date.UTC(yearInt, monthInt - 1, 1, 0, 0, 0));
        const endDate = new Date(Date.UTC(yearInt, monthInt, 0, 23, 59, 59));

        console.log(`üîç Fetching balance for: ${startDate.toISOString()} - ${endDate.toISOString()}`);

        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        const transactions = await Transaction.find({
            user: userId,
            date: { $gte: startDate, $lte: endDate }
        });

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
        const totalIncome = transactions
            .filter(tx => tx.transaction_type === "income")
            .reduce((sum, tx) => sum + tx.amount, 0);

        const totalExpense = transactions
            .filter(tx => tx.transaction_type === "expense")
            .reduce((sum, tx) => sum + tx.amount, 0);

        const balance = totalIncome - totalExpense;

        res.json({
            user: userId,
            year: yearInt,
            month: monthInt,
            income: totalIncome,
            expense: totalExpense,
            balance
        });

    } catch (error) {
        console.error("Error fetching monthly balance:", error);
        res.status(500).json({ error: "Server error" });
    }
});

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á Challenge
router.get('/dates', authMiddleware, async (req, res) => {
    try {
        const userId = req.user.userId;

        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Challenge ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        let activeChallenge = await Challenge.findOne({ user: userId, completed: false });

        if (!activeChallenge) {
            return res.status(404).json({ error: "No active challenge found" });
        }

        let startDate = new Date(activeChallenge.startDate); // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß
        let monthsRequired = activeChallenge.monthsRequired; // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Challenge

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì endDate ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏£‡∏≠‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        let endDate = new Date(startDate);
        endDate.setUTCMonth(endDate.getUTCMonth() + monthsRequired - 1); // ‡πÑ‡∏õ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏£‡∏≠‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        endDate.setUTCDate(1); // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô
        endDate.setUTCMonth(endDate.getUTCMonth() + 1); // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        endDate.setUTCDate(0); // ‡πÑ‡∏î‡πâ‡∏ß‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏£‡∏≠‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        endDate.setUTCHours(23, 59, 59, 999); // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô 23:59:59

        res.json({
            user: userId,
            message: "Challenge dates retrieved",
            startDate: startDate.toISOString(),
            endDate: endDate.toISOString()
        });

    } catch (error) {
        console.error("Error fetching challenge dates:", error);
        res.status(500).json({ error: "Server error" });
    }
});

// ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ monthlyTarget ‡∏Ç‡∏≠‡∏á Challenge ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
router.get('/target', authMiddleware, async (req, res) => {
    try {
        const userId = req.user.userId;

        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Challenge ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        let activeChallenge = await Challenge.findOne({ user: userId, completed: false });

        if (!activeChallenge) {
            return res.status(404).json({ error: "No active challenge found" });
        }

        res.json({
            user: userId,
            message: "Challenge target retrieved",
            monthlyTarget: activeChallenge.monthlyTarget
        });

    } catch (error) {
        console.error("Error fetching challenge target:", error);
        res.status(500).json({ error: "Server error" });
    }
});

// ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ level ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á Challenge
router.get('/level', authMiddleware, async (req, res) => {
    try {
        const userId = req.user.userId;

        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Challenge ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        let activeChallenge = await Challenge.findOne({ user: userId, completed: false });

        if (!activeChallenge) {
            return res.status(404).json({ error: "No active challenge found" });
        }

        res.json({
            user: userId,
            message: "Current challenge level retrieved",
            level: activeChallenge.level
        });

    } catch (error) {
        console.error("Error fetching challenge level:", error);
        res.status(500).json({ error: "Server error" });
    }
});

module.exports = router;